version: 2.1

executors:
  mongoruby:
    docker:
      - image: cimg/ruby:3.1.3
      - image: mongo:5.0.12

orbs:
  kube: circleci/kubernetes@1.3.0
  virtuaexecutors: virtuaorbs/executors@0.1.0
  virtuacommands: virtuaorbs/commands@0.5.1

commands:
  deploy-stack:
    description: Deployes the whole stack (deployment, service, ingress) on a given namespace
    parameters:
      namespace:
        type: string
        default: modusynth-dev
      prefix:
        type: string
        default: ""
    steps:
      - checkout
      - kube/install-kubectl
      - kube/install-kubeconfig
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Authenticate on Docker HUB from environment variable
          command: echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
      - run:
          name: Store tags in a JSON file
          command: curl https://hub.docker.com/v2/repositories/${DOCKER_USERNAME}/${DOCKER_REPOSITORY}/tags -o tags.json
      - run:
          name: Add trace to ensure that validation is ok and to display latest tag for Docker
          command: export LAST_VERSION=$(cat tags.json | jq .results | jq .[0] | jq .name) && echo "export VERSION=${LAST_VERSION}" >> $BASH_ENV
      - run:
          name: Create the deployment on the production cluster
          command: sed -e "s/<VERSION>/${VERSION}/g" -e "s/<NAMESPACE>/<< parameters.namespace >>/g" deployment/kubernetes/deployment.yml | kubectl apply -f -
      - run:
          name: Create the service for the API
          command: sed -e "s/<NAMESPACE>/<< parameters.namespace >>/g" deployment/kubernetes/service.yml |kubectl apply -f -
      - run:
          name: Create the ingress for the API
          command: sed -e "s/<NAMESPACE>/<< parameters.namespace >>/g" -e "s/<PREFIX>/<< parameters.prefix >>/g" deployment/kubernetes/ingress.yml | kubectl apply -f -

jobs:
  test-job:
    executor: mongoruby
    # parallelism: 5
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: gem install bundler && bundle install
      - run:
          name: Run RSpec Tests
          command: |
            bundle exec rspec --format progress --format RspecJunitFormatter -o test/reports/rspec.xml -- spec/
      - store_test_results:
          path: test/reports
      - store_artifacts:
          path: test/reports/rspec.xml
          destination: rspec.xml
  lint-job:
    docker:
      - image: cimg/ruby:3.1.3
    steps:
      - virtuacommands/perform-rubocop-analysis:
          directories: controllers/
  docker-job:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Authenticate on Docker HUB from environment variable
          command: echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
      - run:
          name: Set the version to be used in later steps
          command: export DATETIME=`date +%Y-%m-%d_%H.%M.%S` && echo "export VERSION=${DATETIME}" >> $BASH_ENV
      - run:
          name: Build the docker image from the Dockerfile
          command: docker build -t ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:${VERSION} -f deployment/Dockerfile .
      - run:
          name: Push the image to Docker HUB
          command: docker push ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:${VERSION}
  dev-deployment-job:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - deploy-stack:
          prefix: \/dev
  prod-deployment-job:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - deploy-stack:
          namespace: modusynth

workflows:
  version: 2.1
  build:
    jobs:
      - test-job
      - lint-job
      - docker-job:
          requires:
            - test-job
            - lint-job
      - dev-deployment-job:
          requires:
            - docker-job
      - deployment-approval:
          type: approval
          requires:
            - docker-job
          filters:
            branches:
              only: main
      - prod-deployment-job:
          requires:
            - deployment-approval
          filters:
            branches:
              only: main